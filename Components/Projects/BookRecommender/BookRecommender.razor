@page "/BookRecommender"
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@using Books

<div class="book-recommender">
    <InfoModal/>

    <h1 class="title">BlurbBridge: AI Book Recommendations!</h1>
    <h3 class="subtitle">Enter a description of a type of book you'd like to read and get similar book recommendations</h3>
    <div class="search-container">
        <textarea class="search-input" placeholder="Enter a description (max 500 characters)" @bind="Description" @bind:event="oninput" maxlength="500" rows="4"></textarea>
        <button class="search-button" @onclick="GetRecommendations">
            <img src="images/search.png" alt="Search" style="width: 32px;"/>
        </button>
    </div>

    @if (IsLoading)
    {
        <div class="loading">Loading...</div>
    }

    @if (SimilarBooks != null && SimilarBooks.Any())
    {
        <div class="similar-books">
            <h2 class="section-title">Similar Books</h2>
            <div class="book-list">
                @foreach (var book in SimilarBooks)
                {
                    <div class="book-item" @onclick="() => ShowBook(book)">
                        <p>@book.Title</p>
                        <img src="@book.CoverImg" alt="@book.Title" style="max-width: 64px; align-self: flex-end;"/>
                    </div>
                }
            </div>
        </div>
    }
    <BookCard CurrentBook="SelectedBook" IsVisible="IsBookCardVisible" IsVisibleChanged="(visible) => IsBookCardVisible = visible" />
</div>

@code {
    private string Description { get; set; }
    private List<BookResult> SimilarBooks { get; set; }
    private bool IsLoading { get; set; } = false;
    private HttpClient _httpClient;

    private BookResult SelectedBook { get; set; }
    private bool IsBookCardVisible { get; set; }

    protected override void OnInitialized()
    {
        var handler = new HttpClientHandler
        {
            ServerCertificateCustomValidationCallback = (message, cert, chain, errors) => true
        };
        _httpClient = new HttpClient(handler);
        _httpClient.BaseAddress = new Uri("https://api.eadynt.com/");
    }

    private async Task GetRecommendations()
    {
        if (string.IsNullOrWhiteSpace(Description) || Description.Length > 500)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please enter a valid description (1-500 characters).");
            return;
        }

        IsLoading = true;
        try
        {
            var response = await _httpClient.PostAsJsonAsync("https://api.eadynt.com/similar", new { text = Description });
            response.EnsureSuccessStatusCode();
            var result = await response.Content.ReadFromJsonAsync<SimilarBooksResponse>();
            SimilarBooks = result.Results;
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"An error occurred: {ex.Message}");
            SimilarBooks = null;
        }
        finally
        {
            IsLoading = false;
        }
    }

    public class SimilarBooksResponse
    {
        public List<BookResult> Results { get; set; }
    }

    public void ShowBook(BookResult book)
    {
        SelectedBook = book;
        IsBookCardVisible = true;
    }
}
