<style>
.modal-backdrop {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1000;
    background: rgba(0, 0, 50, 0.7);
    backdrop-filter: blur(5px);
}

.modal-card {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 1001;
    max-width: 500px;
    width: 90%;
    background-color: #f0f8ff;
    border-radius: 15px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
}

.card-img-top {
    padding: 10px;
}
</style>

@if (IsVisible)
{
    <div class="modal-backdrop" @onclick="Close"></div>
    <div class="modal-card">
        <div class="card">
            @if (CurrentBook.CoverImageUrl != null)
            {
                <img class="card-img-top" src="@CurrentBook.CoverImageUrl" alt="@CurrentBook.Title">
            } else {
                <img class="card-img-top" src="/images/generic_book.png" alt="@CurrentBook.Title">
            }
            <div class="card-body">
                <h5 class="card-title">@CurrentBook.Title</h5>
                @if (CurrentBook.Description != null)
                {
                    <p class="card-text">@CurrentBook.Description</p>
                } else {
                    <p class="card-text">No description available</p>
                }
                <button class="btn btn-primary" @onclick="Close">Close</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public Book CurrentBook { get; set; }

    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    private Task Close()
    {
        return IsVisibleChanged.InvokeAsync(false);
    }

    public class Book
    {
        public string Title { get; set; }
        public string Description { get; set; }
        public string CoverImageUrl { get; set; }
    }
}